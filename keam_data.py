# -*- coding: utf-8 -*-
"""KEAM_Data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OThGgS7jqpFfI29Zncp1oVgbPFSl-PBz
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("/content/rank and college data.csv")

df = df[df["Branch"]!="AGR"]
df

df["College"].unique()

df.columns

df.sort_values(by=["Rank"],inplace=True)

df

branches=df["Branch"].unique()
branches

avg_rank = []

for b in branches:
  avg_rank.append(df[df["Branch"]==b]["Rank"].mean())

avg_rank

branch_rank = pd.DataFrame(avg_rank,index=branches,columns=["Average Rank"])

branch_rank = branch_rank.reset_index()

branch_rank = branch_rank.rename(columns={"index":"Branch"})

branch_rank.sort_values(by=["Average Rank"])

top_b = df[df["College"]=="TVE"].sort_values(by=["Rank"])["Branch"]

df[df["College"]=="TCR"].sort_values(by=["Rank"])["Branch"]

df[df["College"]=="TKM"].sort_values(by=["Rank"])["Branch"]

df[df["College"]=="KKE"].sort_values(by=["Rank"])["Branch"]

bottom_b = pd.Series(["IT","PE","ICE"])

top_branches = top_b.append(bottom_b)

top_colleges = df[df["Branch"]=="CS"]["College"]

df[df["Branch"]=="CE"]["College"]

top_colleges = top_colleges.reset_index(drop=True)
top_colleges = top_colleges.iloc[:3].append(pd.Series(["TRV"])).append(top_colleges.iloc[3:]).reset_index(drop=True)
top_colleges

top_colleges = top_colleges.iloc[:9].append(pd.Series(["KKE"])).append(top_colleges.iloc[9:]).reset_index(drop=True)
top_colleges

top_branches = top_branches.iloc[:6].append(pd.Series(["CHE"])).append(top_branches.iloc[6:]).reset_index(drop=True)

top_branches

def priority(college):
  return top_colleges.index[top_colleges==college][0]

top_colleges

df[df["Branch"]=="CS"]

df[df["Branch"]=="ME"]

cllg_df = df.copy()

cllg_df = cllg_df.reset_index(drop=True)

cllg_df["Priority"]=cllg_df["College"].apply(priority)

cllg_sort = cllg_df.sort_values(by=["Priority","Rank"],ascending=[True,True])

cllg_df

cllg_sort

def predict(rank,i,bestCollegePred=False,):
    if(bestCollegePred):
      filtered_df = cllg_sort[cllg_sort['Rank'] >= rank]
    else:
      filtered_df = df[df['Rank'] >= rank]
    return filtered_df[["College","Branch"]][:i]

def predict_by_college(rank,i,college):

  filtered_df = cllg_sort.loc[(cllg_sort["College"]==college)&(cllg_sort["Rank"]>rank)]
  return filtered_df[["College","Branch"]][:i]